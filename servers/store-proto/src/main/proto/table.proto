/*
 * Copyright (C) 2020 Dremio
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";
package nessie.store;

option java_package = "org.projectnessie.server.store.proto";
option java_outer_classname = "ObjectTypes";
option java_generate_equals_and_hash = true;

message Content {
  oneof object_type {
    IcebergMetadataPointer iceberg_metadata_pointer = 1;
    IcebergRefState iceberg_ref_state = 2;
    IcebergViewState iceberg_view_state = 3;
    DeltaLakeTable delta_lake_table = 4;
    Namespace namespace = 6;
  }
  string id = 5;
}

message IcebergMetadataPointer {
  string metadata_location = 1;
}

message IcebergRefState {
  int64 snapshot_id = 1;
  int32 schema_id = 2;
  int32 spec_id = 3;
  int32 sort_order_id = 4;
  // If metadata_location is present, the state of the Iceberg view is
  // maintained purely on the reference/commit.
  // If metadata_location not present, the location needs to be fetched
  // from global state.
  optional string metadata_location = 5;
}

message IcebergViewState {
  int32 version_id = 1;
  int32 schema_id = 2;
  string sql_text = 3;
  string dialect = 4;
  // If metadata_location is present, the state of the Iceberg view is
  // maintained purely on the reference/commit.
  // If metadata_location not present, the location needs to be fetched
  // from global state.
  optional string metadata_location = 5;
}

message DeltaLakeTable {
  optional string last_checkpoint = 1;
  repeated string checkpoint_location_history = 2;
  repeated string metadata_location_history = 3;
}

message Namespace {
  repeated string elements = 1;
  map<string, string> properties = 2;
}
